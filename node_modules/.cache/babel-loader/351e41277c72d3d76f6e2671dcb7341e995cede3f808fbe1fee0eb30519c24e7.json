{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Desktop\\\\Projects\\\\Hostel_app\\\\src\\\\components\\\\project_2\\\\table.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import \"../../styles/table.css\"; \n\n// function Table() {\n//     const [rows, setRows] = useState(0);\n//     const [cols, setCols] = useState(0);\n\n//     const handleSubmit = (e) => {\n//         e.preventDefault();\n//         const newRow = parseInt(e.target.row.value);\n//         const newCol = parseInt(e.target.col.value);\n//         if (!isNaN(newRow) && !isNaN(newCol)) {\n//             setRows(newRow);\n//             setCols(newCol);\n//         }\n//     };\n\n//     // const generateTable = () => {\n//     //     const tableRows = [];\n//     //     let cellNumber = 1;\n//     //     for (let i = 0; i < rows; i++) {\n//     //         const rowCells = [];\n//     //         for (let j = 0; j < cols; j++) {\n//     //             rowCells.push(<td key={j}>{cellNumber++}</td>);\n//     //         }\n//     //         tableRows.push(<tr key={i}>{rowCells}</tr>);\n//     //     }\n//     //     return (\n//     //         <table className=\"generated-table\">\n//     //             <tbody>{tableRows}</tbody>\n//     //         </table>\n//     //     );\n//     // };\n//     const generateTable = (rows, cols) => {\n//         let cellNumber = 1;\n\n//         const tableRows = Array.from({ length: rows }).map((_, rowIndex) => {\n//             const rowCells = Array.from({ length: cols }).map((_, colIndex) => (\n//                 <td key={colIndex}>{cellNumber++}</td>\n//             ));\n//             return <tr key={rowIndex}>{rowCells}</tr>;\n//         });\n\n//         return (\n//             <table className=\"generated-table\">\n//                 <tbody>{tableRows}</tbody>\n//             </table>\n//         );\n//     };\n\n//     return (\n//         <div className=\"container\">\n//             <h1 className=\"title\">Table Generation</h1>\n//             <form onSubmit={handleSubmit} className=\"form\">\n//                 <label>Rows:</label>\n//                 <input type=\"number\" name=\"row\" />\n//                 <label>Columns:</label>\n//                 <input type=\"number\" name=\"col\" />\n//                 <button type=\"submit\">Generate Table</button>\n//             </form>\n//             {rows > 0 && cols > 0 && generateTable()}\n//         </div>\n//     );\n// }\n\n// export default Table;\n\nimport React, { useState } from \"react\";\nimport \"../../styles/table.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Table() {\n  _s();\n  const [rows, setRows] = useState(0);\n  const [cols, setCols] = useState(0);\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newRow = parseInt(e.target.row.value);\n    const newCol = parseInt(e.target.col.value);\n    if (!isNaN(newRow) && !isNaN(newCol)) {\n      setRows(newRow);\n      setCols(newCol);\n    }\n  };\n  const generateTable = (rows, cols) => {\n    let cellNumber = 1;\n    const tableRows = Array.from({\n      length: rows\n    }).map((_, rowIndex) => {\n      const rowCells = Array.from({\n        length: cols\n      }).map((_, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n        children: cellNumber++\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this));\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: rowCells\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 20\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"generated-table\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tableRows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Table Generation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Rows:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"row\",\n        min: \"0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Columns:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"col\",\n        min: \"0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Generate Table\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), rows > 0 && cols > 0 && generateTable(rows, cols), rows <= 0 && cols <= 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please enter a valid number of rows and columns.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 40\n    }, this), rows > 0 && cols > 0 && /*#__PURE__*/_jsxDEV(\"h6\", {\n      children: \"Wow \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 38\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n}\n_s(Table, \"lS+g7xcZPEIn6DDrUSR0ISmYC4U=\");\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Table","_s","rows","setRows","cols","setCols","handleSubmit","e","preventDefault","newRow","parseInt","target","row","value","newCol","col","isNaN","generateTable","cellNumber","tableRows","Array","from","length","map","_","rowIndex","rowCells","colIndex","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","type","name","min","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Desktop/Projects/Hostel_app/src/components/project_2/table.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import \"../../styles/table.css\"; \r\n\r\n// function Table() {\r\n//     const [rows, setRows] = useState(0);\r\n//     const [cols, setCols] = useState(0);\r\n\r\n//     const handleSubmit = (e) => {\r\n//         e.preventDefault();\r\n//         const newRow = parseInt(e.target.row.value);\r\n//         const newCol = parseInt(e.target.col.value);\r\n//         if (!isNaN(newRow) && !isNaN(newCol)) {\r\n//             setRows(newRow);\r\n//             setCols(newCol);\r\n//         }\r\n//     };\r\n\r\n//     // const generateTable = () => {\r\n//     //     const tableRows = [];\r\n//     //     let cellNumber = 1;\r\n//     //     for (let i = 0; i < rows; i++) {\r\n//     //         const rowCells = [];\r\n//     //         for (let j = 0; j < cols; j++) {\r\n//     //             rowCells.push(<td key={j}>{cellNumber++}</td>);\r\n//     //         }\r\n//     //         tableRows.push(<tr key={i}>{rowCells}</tr>);\r\n//     //     }\r\n//     //     return (\r\n//     //         <table className=\"generated-table\">\r\n//     //             <tbody>{tableRows}</tbody>\r\n//     //         </table>\r\n//     //     );\r\n//     // };\r\n//     const generateTable = (rows, cols) => {\r\n//         let cellNumber = 1;\r\n        \r\n//         const tableRows = Array.from({ length: rows }).map((_, rowIndex) => {\r\n//             const rowCells = Array.from({ length: cols }).map((_, colIndex) => (\r\n//                 <td key={colIndex}>{cellNumber++}</td>\r\n//             ));\r\n//             return <tr key={rowIndex}>{rowCells}</tr>;\r\n//         });\r\n    \r\n//         return (\r\n//             <table className=\"generated-table\">\r\n//                 <tbody>{tableRows}</tbody>\r\n//             </table>\r\n//         );\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"container\">\r\n//             <h1 className=\"title\">Table Generation</h1>\r\n//             <form onSubmit={handleSubmit} className=\"form\">\r\n//                 <label>Rows:</label>\r\n//                 <input type=\"number\" name=\"row\" />\r\n//                 <label>Columns:</label>\r\n//                 <input type=\"number\" name=\"col\" />\r\n//                 <button type=\"submit\">Generate Table</button>\r\n//             </form>\r\n//             {rows > 0 && cols > 0 && generateTable()}\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default Table;\r\n\r\nimport React, { useState } from \"react\";\r\nimport \"../../styles/table.css\"; \r\n\r\nfunction Table() {\r\n    const [rows, setRows] = useState(0);\r\n    const [cols, setCols] = useState(0);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const newRow = parseInt(e.target.row.value);\r\n        const newCol = parseInt(e.target.col.value);\r\n        if (!isNaN(newRow) && !isNaN(newCol)) {\r\n            setRows(newRow);\r\n            setCols(newCol);\r\n        }\r\n    };\r\n\r\n    const generateTable = (rows, cols) => {\r\n        let cellNumber = 1;\r\n        \r\n        const tableRows = Array.from({ length: rows }).map((_, rowIndex) => {\r\n            const rowCells = Array.from({ length: cols }).map((_, colIndex) => (\r\n                <td key={colIndex}>{cellNumber++}</td>\r\n            ));\r\n            return <tr key={rowIndex}>{rowCells}</tr>;\r\n        });\r\n    \r\n        return (\r\n            <table className=\"generated-table\">\r\n                <tbody>{tableRows}</tbody>\r\n            </table>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"title\">Table Generation</h1>\r\n            <form onSubmit={handleSubmit} className=\"form\">\r\n                <label>Rows:</label>\r\n                <input type=\"number\" name=\"row\" min=\"0\" />\r\n                <label>Columns:</label>\r\n                <input type=\"number\" name=\"col\" min=\"0\" />\r\n                <button type=\"submit\">Generate Table</button>\r\n            </form>\r\n            {rows > 0 && cols > 0 && generateTable(rows, cols)}\r\n            {rows <= 0 && cols <= 0 && <p>Please enter a valid number of rows and columns.</p>}\r\n            {rows > 0 && cols > 0 && <h6>Wow </h6>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}