{"ast":null,"code":"// import React, { useState } from \"react\";\n// import \"../../styles/table.css\"; \n// function Table() {\n//     const [rows, setRows] = useState(0);\n//     const [cols, setCols] = useState(0);\n//     const handleSubmit = (e) => {\n//         e.preventDefault();\n//         const newRow = parseInt(e.target.row.value);\n//         const newCol = parseInt(e.target.col.value);\n//         if (!isNaN(newRow) && !isNaN(newCol)) {\n//             setRows(newRow);\n//             setCols(newCol);\n//         }\n//     };\n//     // const generateTable = () => {\n//     //     const tableRows = [];\n//     //     let cellNumber = 1;\n//     //     for (let i = 0; i < rows; i++) {\n//     //         const rowCells = [];\n//     //         for (let j = 0; j < cols; j++) {\n//     //             rowCells.push(<td key={j}>{cellNumber++}</td>);\n//     //         }\n//     //         tableRows.push(<tr key={i}>{rowCells}</tr>);\n//     //     }\n//     //     return (\n//     //         <table className=\"generated-table\">\n//     //             <tbody>{tableRows}</tbody>\n//     //         </table>\n//     //     );\n//     // };\n//     const generateTable = (rows, cols) => {\n//         let cellNumber = 1;\n//         const tableRows = Array.from({ length: rows }).map((_, rowIndex) => {\n//             const rowCells = Array.from({ length: cols }).map((_, colIndex) => (\n//                 <td key={colIndex}>{cellNumber++}</td>\n//             ));\n//             return <tr key={rowIndex}>{rowCells}</tr>;\n//         });\n//         return (\n//             <table className=\"generated-table\">\n//                 <tbody>{tableRows}</tbody>\n//             </table>\n//         );\n//     };\n//     return (\n//         <div className=\"container\">\n//             <h1 className=\"title\">Table Generation</h1>\n//             <form onSubmit={handleSubmit} className=\"form\">\n//                 <label>Rows:</label>\n//                 <input type=\"number\" name=\"row\" />\n//                 <label>Columns:</label>\n//                 <input type=\"number\" name=\"col\" />\n//                 <button type=\"submit\">Generate Table</button>\n//             </form>\n//             {rows > 0 && cols > 0 && generateTable()}\n//         </div>\n//     );\n// }\n// export default Table;\nimport React,{useState}from\"react\";import\"../../styles/table.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Table(){const[rows,setRows]=useState(0);const[cols,setCols]=useState(0);const handleSubmit=e=>{e.preventDefault();const newRow=parseInt(e.target.row.value);const newCol=parseInt(e.target.col.value);if(!isNaN(newRow)&&!isNaN(newCol)){setRows(newRow);setCols(newCol);}};const generateTable=(rows,cols)=>{let cellNumber=1;const tableRows=Array.from({length:rows}).map((_,rowIndex)=>{const rowCells=Array.from({length:cols}).map((_,colIndex)=>/*#__PURE__*/_jsx(\"td\",{children:cellNumber++},colIndex));return/*#__PURE__*/_jsx(\"tr\",{children:rowCells},rowIndex);});return/*#__PURE__*/_jsx(\"table\",{className:\"generated-table\",children:/*#__PURE__*/_jsx(\"tbody\",{children:tableRows})});};return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"title\",children:\"Table Generation\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"form\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Rows:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",name:\"row\",min:\"0\"}),/*#__PURE__*/_jsx(\"label\",{children:\"Columns:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",name:\"col\",min:\"0\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Generate Table\"})]}),rows>0&&cols>0&&/*#__PURE__*/_jsx(\"h6\",{children:\"Wow You smashed It!!!\"}),rows>0&&cols>0&&generateTable(rows,cols),rows<=0&&cols<=0&&/*#__PURE__*/_jsx(\"p\",{children:\"Please enter a valid number of rows and columns.\"})]});}export default Table;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","Table","rows","setRows","cols","setCols","handleSubmit","e","preventDefault","newRow","parseInt","target","row","value","newCol","col","isNaN","generateTable","cellNumber","tableRows","Array","from","length","map","_","rowIndex","rowCells","colIndex","children","className","onSubmit","type","name","min"],"sources":["C:/Users/HP/OneDrive/Desktop/Projects/Portfolio/src/components/project_2/table.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import \"../../styles/table.css\"; \r\n\r\n// function Table() {\r\n//     const [rows, setRows] = useState(0);\r\n//     const [cols, setCols] = useState(0);\r\n\r\n//     const handleSubmit = (e) => {\r\n//         e.preventDefault();\r\n//         const newRow = parseInt(e.target.row.value);\r\n//         const newCol = parseInt(e.target.col.value);\r\n//         if (!isNaN(newRow) && !isNaN(newCol)) {\r\n//             setRows(newRow);\r\n//             setCols(newCol);\r\n//         }\r\n//     };\r\n\r\n//     // const generateTable = () => {\r\n//     //     const tableRows = [];\r\n//     //     let cellNumber = 1;\r\n//     //     for (let i = 0; i < rows; i++) {\r\n//     //         const rowCells = [];\r\n//     //         for (let j = 0; j < cols; j++) {\r\n//     //             rowCells.push(<td key={j}>{cellNumber++}</td>);\r\n//     //         }\r\n//     //         tableRows.push(<tr key={i}>{rowCells}</tr>);\r\n//     //     }\r\n//     //     return (\r\n//     //         <table className=\"generated-table\">\r\n//     //             <tbody>{tableRows}</tbody>\r\n//     //         </table>\r\n//     //     );\r\n//     // };\r\n//     const generateTable = (rows, cols) => {\r\n//         let cellNumber = 1;\r\n        \r\n//         const tableRows = Array.from({ length: rows }).map((_, rowIndex) => {\r\n//             const rowCells = Array.from({ length: cols }).map((_, colIndex) => (\r\n//                 <td key={colIndex}>{cellNumber++}</td>\r\n//             ));\r\n//             return <tr key={rowIndex}>{rowCells}</tr>;\r\n//         });\r\n    \r\n//         return (\r\n//             <table className=\"generated-table\">\r\n//                 <tbody>{tableRows}</tbody>\r\n//             </table>\r\n//         );\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"container\">\r\n//             <h1 className=\"title\">Table Generation</h1>\r\n//             <form onSubmit={handleSubmit} className=\"form\">\r\n//                 <label>Rows:</label>\r\n//                 <input type=\"number\" name=\"row\" />\r\n//                 <label>Columns:</label>\r\n//                 <input type=\"number\" name=\"col\" />\r\n//                 <button type=\"submit\">Generate Table</button>\r\n//             </form>\r\n//             {rows > 0 && cols > 0 && generateTable()}\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default Table;\r\n\r\nimport React, { useState } from \"react\";\r\nimport \"../../styles/table.css\"; \r\n\r\nfunction Table() {\r\n    const [rows, setRows] = useState(0);\r\n    const [cols, setCols] = useState(0);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const newRow = parseInt(e.target.row.value);\r\n        const newCol = parseInt(e.target.col.value);\r\n        if (!isNaN(newRow) && !isNaN(newCol)) {\r\n            setRows(newRow);\r\n            setCols(newCol);\r\n        }\r\n    };\r\n\r\n    const generateTable = (rows, cols) => {\r\n        let cellNumber = 1;\r\n        \r\n        const tableRows = Array.from({ length: rows }).map((_, rowIndex) => {\r\n            const rowCells = Array.from({ length: cols }).map((_, colIndex) => (\r\n                <td key={colIndex}>{cellNumber++}</td>\r\n            ));\r\n            return <tr key={rowIndex}>{rowCells}</tr>;\r\n        });\r\n    \r\n        return (\r\n            <table className=\"generated-table\">\r\n                <tbody>{tableRows}</tbody>\r\n            </table>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"title\">Table Generation</h1>\r\n            <form onSubmit={handleSubmit} className=\"form\">\r\n                <label>Rows:</label>\r\n                <input type=\"number\" name=\"row\" min=\"0\" />\r\n                <label>Columns:</label>\r\n                <input type=\"number\" name=\"col\" min=\"0\" />\r\n                <button type=\"submit\">Generate Table</button>\r\n            </form>\r\n            {rows > 0 && cols > 0 && <h6>Wow You smashed It!!!</h6>}\r\n            {rows > 0 && cols > 0 && generateTable(rows, cols)}\r\n            {rows <= 0 && cols <= 0 && <p>Please enter a valid number of rows and columns.</p>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,wBAAwB,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAEhC,QAAS,CAAAC,KAAKA,CAAA,CAAG,CACb,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGP,QAAQ,CAAC,CAAC,CAAC,CACnC,KAAM,CAACQ,IAAI,CAAEC,OAAO,CAAC,CAAGT,QAAQ,CAAC,CAAC,CAAC,CAEnC,KAAM,CAAAU,YAAY,CAAIC,CAAC,EAAK,CACxBA,CAAC,CAACC,cAAc,CAAC,CAAC,CAClB,KAAM,CAAAC,MAAM,CAAGC,QAAQ,CAACH,CAAC,CAACI,MAAM,CAACC,GAAG,CAACC,KAAK,CAAC,CAC3C,KAAM,CAAAC,MAAM,CAAGJ,QAAQ,CAACH,CAAC,CAACI,MAAM,CAACI,GAAG,CAACF,KAAK,CAAC,CAC3C,GAAI,CAACG,KAAK,CAACP,MAAM,CAAC,EAAI,CAACO,KAAK,CAACF,MAAM,CAAC,CAAE,CAClCX,OAAO,CAACM,MAAM,CAAC,CACfJ,OAAO,CAACS,MAAM,CAAC,CACnB,CACJ,CAAC,CAED,KAAM,CAAAG,aAAa,CAAGA,CAACf,IAAI,CAAEE,IAAI,GAAK,CAClC,GAAI,CAAAc,UAAU,CAAG,CAAC,CAElB,KAAM,CAAAC,SAAS,CAAGC,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAEpB,IAAK,CAAC,CAAC,CAACqB,GAAG,CAAC,CAACC,CAAC,CAAEC,QAAQ,GAAK,CAChE,KAAM,CAAAC,QAAQ,CAAGN,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAElB,IAAK,CAAC,CAAC,CAACmB,GAAG,CAAC,CAACC,CAAC,CAAEG,QAAQ,gBAC1D7B,IAAA,OAAA8B,QAAA,CAAoBV,UAAU,EAAE,EAAvBS,QAA4B,CACxC,CAAC,CACF,mBAAO7B,IAAA,OAAA8B,QAAA,CAAoBF,QAAQ,EAAnBD,QAAwB,CAAC,CAC7C,CAAC,CAAC,CAEF,mBACI3B,IAAA,UAAO+B,SAAS,CAAC,iBAAiB,CAAAD,QAAA,cAC9B9B,IAAA,UAAA8B,QAAA,CAAQT,SAAS,CAAQ,CAAC,CACvB,CAAC,CAEhB,CAAC,CAED,mBACInB,KAAA,QAAK6B,SAAS,CAAC,WAAW,CAAAD,QAAA,eACtB9B,IAAA,OAAI+B,SAAS,CAAC,OAAO,CAAAD,QAAA,CAAC,kBAAgB,CAAI,CAAC,cAC3C5B,KAAA,SAAM8B,QAAQ,CAAExB,YAAa,CAACuB,SAAS,CAAC,MAAM,CAAAD,QAAA,eAC1C9B,IAAA,UAAA8B,QAAA,CAAO,OAAK,CAAO,CAAC,cACpB9B,IAAA,UAAOiC,IAAI,CAAC,QAAQ,CAACC,IAAI,CAAC,KAAK,CAACC,GAAG,CAAC,GAAG,CAAE,CAAC,cAC1CnC,IAAA,UAAA8B,QAAA,CAAO,UAAQ,CAAO,CAAC,cACvB9B,IAAA,UAAOiC,IAAI,CAAC,QAAQ,CAACC,IAAI,CAAC,KAAK,CAACC,GAAG,CAAC,GAAG,CAAE,CAAC,cAC1CnC,IAAA,WAAQiC,IAAI,CAAC,QAAQ,CAAAH,QAAA,CAAC,gBAAc,CAAQ,CAAC,EAC3C,CAAC,CACN1B,IAAI,CAAG,CAAC,EAAIE,IAAI,CAAG,CAAC,eAAIN,IAAA,OAAA8B,QAAA,CAAI,uBAAqB,CAAI,CAAC,CACtD1B,IAAI,CAAG,CAAC,EAAIE,IAAI,CAAG,CAAC,EAAIa,aAAa,CAACf,IAAI,CAAEE,IAAI,CAAC,CACjDF,IAAI,EAAI,CAAC,EAAIE,IAAI,EAAI,CAAC,eAAIN,IAAA,MAAA8B,QAAA,CAAG,kDAAgD,CAAG,CAAC,EACjF,CAAC,CAEd,CAEA,cAAe,CAAA3B,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}